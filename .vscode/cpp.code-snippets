{
	"base": 
	{
		"prefix":"base",
		"body":
		[
			"#include<bits/stdc++.h>",
			"using namespace std;",
			"int main()",
			"{",
			"	",
			"	return 0;",
			"}",
		],
		"description": "Basic Components"
	},
	"train": 
	{
		"prefix":"train",
		"body":
		[
			"#pragma GCC optimize(2)",
			"#pragma GCC optimize(\"Ofast\")",
			"#pragma GCC optimize(\"inline\")",
			"#pragma GCC optimize(\"-fgcse\")",
			"#pragma GCC optimize(\"-fgcse-lm\")",
			"#pragma GCC optimize(\"-fipa-sra\")",
			"#pragma GCC optimize(\"-ftree-pre\")",
			"#pragma GCC optimize(\"-ftree-vrp\")",
			"#pragma GCC optimize(\"-fpeephole2\")",
			"#pragma GCC optimize(\"-ffast-math\")",
			"#pragma GCC optimize(\"-fsched-spec\")",
			"#pragma GCC optimize(\"unroll-loops\")",
			"#pragma GCC optimize(\"-falign-jumps\")",
			"#pragma GCC optimize(\"-falign-loops\")",
			"#pragma GCC optimize(\"-falign-labels\")",
			"#pragma GCC optimize(\"-fdevirtualize\")",
			"#pragma GCC optimize(\"-fcaller-saves\")",
			"#pragma GCC optimize(\"-fcrossjumping\")",
			"#pragma GCC optimize(\"-fthread-jumps\")",
			"#pragma GCC optimize(\"-funroll-loops\")",
			"#pragma GCC optimize(\"-fwhole-program\")",
			"#pragma GCC optimize(\"-freorder-blocks\")",
			"#pragma GCC optimize(\"-fschedule-insns\")",
			"#pragma GCC optimize(\"inline-functions\")",
			"#pragma GCC optimize(\"-ftree-tail-merge\")",
			"#pragma GCC optimize(\"-fschedule-insns2\")",
			"#pragma GCC optimize(\"-fstrict-aliasing\")",
			"#pragma GCC optimize(\"-fstrict-overflow\")",
			"#pragma GCC optimize(\"-falign-functions\")",
			"#pragma GCC optimize(\"-fcse-skip-blocks\")",
			"#pragma GCC optimize(\"-fcse-follow-jumps\")",
			"#pragma GCC optimize(\"-fsched-interblock\")",
			"#pragma GCC optimize(\"-fpartial-inlining\")",
			"#pragma GCC optimize(\"no-stack-protector\")",
			"#pragma GCC optimize(\"-freorder-functions\")",
			"#pragma GCC optimize(\"-findirect-inlining\")",
			"#pragma GCC optimize(\"-fhoist-adjacent-loads\")",
			"#pragma GCC optimize(\"-frerun-cse-after-loop\")",
			"#pragma GCC optimize(\"inline-small-functions\")",
			"#pragma GCC optimize(\"-finline-small-functions\")",
			"#pragma GCC optimize(\"-ftree-switch-conversion\")",
			"#pragma GCC optimize(\"-foptimize-sibling-calls\")",
			"#pragma GCC optimize(\"-fexpensive-optimizations\")",
			"#pragma GCC optimize(\"-funsafe-loop-optimizations\")",
			"#pragma GCC optimize(\"inline-functions-called-once\")",
			"#pragma GCC optimize(\"-fdelete-null-pointer-checks\")",
		],
		"description": "Optimize Code"
	},
	"read": 
	{
		"prefix":"read",
		"body":
		[
			"void read(){}",
			"template<typename T,typename... Ts>",
			"inline void read(T &arg,Ts&... args)",
			"{",
			"	T x=0,f=1;",
			"	char c=getchar();",
			"	while(!isdigit(c)){if(c=='-') f=-1;c=getchar();}",
			"	while(isdigit(c)){x=(x<<3)+(x<<1)+(c-'0');c=getchar();}",
			"	arg=x*f;",
			"	read(args...);",
			"}",
		],
		"description": "fast read that can input several elements in the same time"
	},
	// "[name]": 
	// {
	// 	"prefix":"[name]",
	// 	"body":
	// 	[
	// 	],
	// 	"description": "[description]"
	// },
}